// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    moviesTable,
    seriesTable,
    syncUserTable,
    settingsTable,
    moviesFilterTable,
    seriesFilterTable,
  ];
  late final Shape0 moviesTable = Shape0(
    source: i0.VersionedTable(
      entityName: 'movies_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 seriesTable = Shape1(
    source: i0.VersionedTable(
      entityName: 'series_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_13,
        _column_2,
        _column_3,
        _column_4,
        _column_14,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 syncUserTable = Shape2(
    source: i0.VersionedTable(
      entityName: 'sync_user_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_15, _column_16, _column_17, _column_18],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 settingsTable = Shape3(
    source: i0.VersionedTable(
      entityName: 'settings_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_19],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 moviesFilterTable = Shape4(
    source: i0.VersionedTable(
      entityName: 'movies_filter_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_20,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 seriesFilterTable = Shape4(
    source: i0.VersionedTable(
      entityName: 'series_filter_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_20,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get tmdbId =>
      columnsByName['tmdb_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get genres =>
      columnsByName['genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get originCountry =>
      columnsByName['origin_country']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get premiereDate =>
      columnsByName['premiere_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get tmdbRating =>
      columnsByName['tmdb_rating']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userRating =>
      columnsByName['user_rating']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isInWatchlist =>
      columnsByName['is_in_watchlist']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isWatched =>
      columnsByName['is_watched']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get localizedTitle =>
      columnsByName['localized_title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get localizedPosterUrl =>
      columnsByName['localized_poster_url']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'tmdb_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'genres',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'origin_country',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_4(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'premiere_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'tmdb_rating',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'user_rating',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_7(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_in_watchlist',
      aliasedName,
      true,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_in_watchlist" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<bool> _column_8(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_watched',
      aliasedName,
      true,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_watched" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<DateTime> _column_9(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<DateTime> _column_10(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'localized_title',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'localized_poster_url',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get tmdbId =>
      columnsByName['tmdb_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get posterUrl =>
      columnsByName['poster_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get genres =>
      columnsByName['genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get originCountry =>
      columnsByName['origin_country']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get premiereDate =>
      columnsByName['premiere_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get tmdbRating =>
      columnsByName['tmdb_rating']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userRating =>
      columnsByName['user_rating']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isInWatchlist =>
      columnsByName['is_in_watchlist']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isWatched =>
      columnsByName['is_watched']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get localizedTitle =>
      columnsByName['localized_title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get localizedPosterUrl =>
      columnsByName['localized_poster_url']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'poster_url',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'title',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get moviesSyncedAt =>
      columnsByName['movies_synced_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get seriesSyncedAt =>
      columnsByName['series_synced_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'uid',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'email',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<DateTime> _column_17(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'movies_synced_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<DateTime> _column_18(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'series_synced_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isFirstLaunch =>
      columnsByName['is_first_launch']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<bool> _column_19(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_first_launch',
      aliasedName,
      true,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_first_launch" IN (0, 1))',
      ),
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get year =>
      columnsByName['year']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get sortBy =>
      columnsByName['sort_by']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get withCountries =>
      columnsByName['with_countries']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get withGenres =>
      columnsByName['with_genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get withoutGenres =>
      columnsByName['without_genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get includeWatched =>
      columnsByName['include_watched']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get includeWatchlist =>
      columnsByName['include_watchlist']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'year',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'sort_by',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'with_countries',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'with_genres',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'without_genres',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_25(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'include_watched',
      aliasedName,
      true,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("include_watched" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<bool> _column_26(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'include_watchlist',
      aliasedName,
      true,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("include_watchlist" IN (0, 1))',
      ),
    );

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    moviesTable,
    seriesTable,
    syncUserTable,
    settingsTable,
    moviesFilterTable,
    seriesFilterTable,
  ];
  late final Shape0 moviesTable = Shape0(
    source: i0.VersionedTable(
      entityName: 'movies_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 seriesTable = Shape1(
    source: i0.VersionedTable(
      entityName: 'series_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_13,
        _column_2,
        _column_3,
        _column_4,
        _column_14,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 syncUserTable = Shape2(
    source: i0.VersionedTable(
      entityName: 'sync_user_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_15, _column_16, _column_17, _column_18],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 settingsTable = Shape3(
    source: i0.VersionedTable(
      entityName: 'settings_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_19],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 moviesFilterTable = Shape5(
    source: i0.VersionedTable(
      entityName: 'movies_filter_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 seriesFilterTable = Shape5(
    source: i0.VersionedTable(
      entityName: 'series_filter_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get sortBy =>
      columnsByName['sort_by']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get withCountries =>
      columnsByName['with_countries']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get withGenres =>
      columnsByName['with_genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get withoutGenres =>
      columnsByName['without_genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get includeWatched =>
      columnsByName['include_watched']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get includeWatchlist =>
      columnsByName['include_watchlist']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get fromDate =>
      columnsByName['from_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get toDate =>
      columnsByName['to_date']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<DateTime> _column_27(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'from_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<DateTime> _column_28(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'to_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    moviesTable,
    seriesTable,
    syncUserTable,
    settingsTable,
    moviesFilterTable,
    seriesFilterTable,
    moviesEventsTable,
    seriesEventsTable,
  ];
  late final Shape6 moviesTable = Shape6(
    source: i0.VersionedTable(
      entityName: 'movies_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_29,
        _column_30,
        _column_11,
        _column_12,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape7 seriesTable = Shape7(
    source: i0.VersionedTable(
      entityName: 'series_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_13,
        _column_2,
        _column_3,
        _column_4,
        _column_14,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_29,
        _column_30,
        _column_11,
        _column_12,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 syncUserTable = Shape2(
    source: i0.VersionedTable(
      entityName: 'sync_user_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_15, _column_16, _column_17, _column_18],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 settingsTable = Shape3(
    source: i0.VersionedTable(
      entityName: 'settings_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_19],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 moviesFilterTable = Shape5(
    source: i0.VersionedTable(
      entityName: 'movies_filter_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 seriesFilterTable = Shape5(
    source: i0.VersionedTable(
      entityName: 'series_filter_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape8 moviesEventsTable = Shape8(
    source: i0.VersionedTable(
      entityName: 'movies_events_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_31,
        _column_32,
        _column_33,
        _column_6,
        _column_34,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape8 seriesEventsTable = Shape8(
    source: i0.VersionedTable(
      entityName: 'series_events_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_31,
        _column_35,
        _column_33,
        _column_6,
        _column_34,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get tmdbId =>
      columnsByName['tmdb_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get genres =>
      columnsByName['genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get originCountry =>
      columnsByName['origin_country']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get premiereDate =>
      columnsByName['premiere_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get tmdbRating =>
      columnsByName['tmdb_rating']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userRating =>
      columnsByName['user_rating']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isInWatchlist =>
      columnsByName['is_in_watchlist']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isWatched =>
      columnsByName['is_watched']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get watchlistAddedAt =>
      columnsByName['watchlist_added_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastWatchedAt =>
      columnsByName['last_watched_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get localizedTitle =>
      columnsByName['localized_title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get localizedPosterUrl =>
      columnsByName['localized_poster_url']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<DateTime> _column_29(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'watchlist_added_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<DateTime> _column_30(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_watched_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get tmdbId =>
      columnsByName['tmdb_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get posterUrl =>
      columnsByName['poster_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get genres =>
      columnsByName['genres']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get originCountry =>
      columnsByName['origin_country']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get premiereDate =>
      columnsByName['premiere_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get tmdbRating =>
      columnsByName['tmdb_rating']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userRating =>
      columnsByName['user_rating']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isInWatchlist =>
      columnsByName['is_in_watchlist']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isWatched =>
      columnsByName['is_watched']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get watchlistAddedAt =>
      columnsByName['watchlist_added_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastWatchedAt =>
      columnsByName['last_watched_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get localizedTitle =>
      columnsByName['localized_title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get localizedPosterUrl =>
      columnsByName['localized_poster_url']! as i1.GeneratedColumn<String>;
}

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get eventId =>
      columnsByName['event_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get tmdbId =>
      columnsByName['tmdb_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userRating =>
      columnsByName['user_rating']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get at =>
      columnsByName['at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'event_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<int> _column_32(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'tmdb_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints:
          'NOT NULL REFERENCES movies_table(tmdb_id) ON DELETE CASCADE',
    );
i1.GeneratedColumn<String> _column_33(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_34(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<int> _column_35(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'tmdb_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints:
          'NOT NULL REFERENCES series_table(tmdb_id) ON DELETE CASCADE',
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(
    from1To2: from1To2,
    from2To3: from2To3,
    from3To4: from3To4,
  ),
);
